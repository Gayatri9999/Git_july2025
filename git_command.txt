What is Git?
Git is a tool that helps you manage changes to your code over time. It keeps track of every little change or update you make, you can always look back at previous versions or undo mistakes if needed.

Features of Git
Version Control System: Git keeps track of every change you make to your project files. You can go back to previous versions is any requirement arises.
Repositories: A Git repository (or repo) is like a project's central hub where everything related to your work is stored and managed. There are two main types:
Local Repository: This is a copy of the repository which is stored in your computer. You can work on your project and make changes here.
Remote Repository: This is stored on a server, like GitHub, where you and others can share and work on a project.
Commits: Every time you make changes and save them in Git, these are called commits. The repository keeps track of all the commits you have made.
Branches: A repository allows you to create Branches and work on new features and fixes. For example, you can have a "main" branch for stable code and a "feature" branch for new features you're developing.
Merging: Once you are done with the branches you have made, you can merge those branches into main branch. This adds the changes you have made in the rest of the project.
Cloning: Cloning is a process of making a complete copy of Git repository. It's like copying the entire project from central location ( like website) to your own computer.
Reason to Choose Git
Distributed System: Every developer has a complete local copy of the project, allowing for offline work and increased resilience.
Performance: Git is fast and efficient, handling large projects with ease.
Branching and Merging: Git's lightweight branching and easy merging facilitate parallel development and feature isolation.
Collaboration: Tools like GitHub enhance team collaboration, code reviews, and project management.
Track Changes: Git tracks changes and maintains a history, making it easy to revert to previous versions.
Steps to Setup a Git
Install Git: Download and install Git from the official Git website.
Configure Git: Set up your username and email.
git config --global user.name "Your Name"
git config --global user.email "your.email@example.com"
Create a Repository: Navigate to your project directory and initialize a Git repository.
git init
Make Your First Commit: Add files to the staging area and commit your changes.
git add .
git commit -m "Initial commit"
Basic Git Commands
git init: Initializes a new Git repository.
git init
git clone [URL]: Clones a remote repository to your local machine.
git clone [url]
git add [file]: Stages changes to be committed.
git add [file]
git commit -m "message": Commits the staged changes with a message.
git commit -m "Your commit message"
git push: Pushes your commits to a remote repository.
git push origin branch-name
git pull: Fetches and merges changes from a remote repository to your local repository.
git pull origin branch-name
git status: Shows the status of changes in your working directory.
git status
Advantages of Git
Distributed System: Everyone has the complete project history on their computer, so you can work offline and there's no single point of failure.
Fast: Git handles large projects quickly and efficiently.
Branching and Merging: You can create branches to work on new features and merge them easily, without affecting the main project.
Collaboration: Git makes it easy for teams to work together, review each other's code, and manage projects.
Change Tracking: Git keeps a record of all changes, so you can go back to previous versions if needed.
Free and Open Source: Git is free to use and has a large community for support.
Disadvantages of Git
Learning Curve: Git can be complex to learn, especially for beginners.
Complex Commands: Some commands and operations can be difficult to understand and remember.
Merge Conflicts: Resolving conflicts when merging branches can be challenging.
Storage: The local repository can take up significant space on your computer.
Setup and Configuration: Initial setup and configuration can be time-consuming.
Not Ideal for Large Binary Files: Git is less efficient at handling large binary files (e.g., videos, images).
Git Workflow
A Git workflow is a set of guidelines for using Git in a structured and efficient manner. Hereâ€™s a simple and common Git workflow:

Clone Repository: git clone git@github.com:username/repository.git
Create Branch: git checkout -b feature-branch-name
Check Status: git status
Stage Changes: git add filename or git add .
Commit Changes: git commit -m "Add feature X"
Push Branch: git push origin feature-branch-name
Create Pull Request: On Github/other service
Update Local Repository: git checkout main, git pull origin main
Delete Branch: git branch -d feature-branch-name, git push origin --delete feature-branch-name


